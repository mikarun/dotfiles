 "Specify a directory for plugins
 " - For Neovim: stdpath('data') . '/plugged'
 " - Avoid using standard Vim directory names like 'plugin'
 call plug#begin('~/.vim/plugged')

" File and folder management
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'mileszs/ack.vim'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'natebosch/dartlang-snippets'

" Language support
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/syntastic'
Plug 'tmhedberg/matchit'
Plug 'kana/vim-textobj-user'

" Dart
Plug 'dart-lang/dart-vim-plugin'

" Typescript
Plug 'ianks/vim-tsx'
Plug 'leafgarland/typescript-vim'
" GraphQL
Plug 'jparise/vim-graphql'

" Rails / ruby
Plug 'vim-ruby/vim-ruby'
"rails plugin failed to install. install manualy
"'https://github.com/tpope/vim-rails.git'
Plug 'kchmck/vim-coffee-script'
Plug 'rhysd/vim-textobj-ruby'


" Git
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'

" Theme
"Plug 'drewtempelmeyer/palenight.vim'
Plug 'joshdick/onedark.vim'
Plug 'blueyed/vim-diminactive'


 " Initialize plugin system
 call plug#end()

" onedark.vim override: Don't set a background color when running in a terminal;
" just use the terminal's background color
" `gui` is the hex color code used in GUI mode/nvim true-color mode
" `cterm` is the color code used in 256-color mode
" `cterm16` is the color code used in 16-color mode
if (has("autocmd") && !has("gui_running"))
  augroup colorset
    autocmd!
    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
    autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white }) " `bg` will not be styled since there is no `bg` setting
  augroup END
endif


 " ---------------------------------------------------------------------------
 "  General
 " ---------------------------------------------------------------------------

 filetype plugin indent on     
 let mapleader = ","
 let g:mapleader = ","
 set modelines=0
 set history=1000
 set nobackup
 set nowritebackup
 set noswapfile
 syntax enable
 set autoread
 set clipboard=unnamed

 " ---------------------------------------------------------------------------
 "  UI
 " ---------------------------------------------------------------------------
 set background=dark
 colorscheme onedark
 "colorscheme palenight
 set title
 set encoding=utf-8
 set scrolloff=3
 set autoindent
 set smartindent
 set showmode
 set showcmd
 set hidden
 set wildmenu
 set wildmode=list:longest
 set visualbell
 set cursorline
 set ttyfast
 set ruler
 set backspace=indent,eol,start
 set laststatus=2
 set number
 " set noballooneval
 set relativenumber
 "set undofile
 set cpoptions+=$


" Fold
"set foldenable
"set foldnestmax=1
"set foldmethod=syntax
"let g:ruby_fold_lines_limit = 200

" Auto adjust window sizes when they become current
"set winwidth=84
"set winheight=5
"set winminheight=5
"set winheight=999

set splitbelow splitright

" ---------------------------------------------------------------------------
"  Text Formatting
" ---------------------------------------------------------------------------
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set tags:tags,./tmp/tags;

  "---------------------------------------------------------------------------
  "  File browsing
  "
  "---------------------------------------------------------------------------
  let g:netrw_banner=0 "disable banner
  let g:netrw_browses_split=4 " open in prior window
  let g:netrw_altv=1 " opens split to the right
  let g:netrw_liststyle=3 " tree view
  "---------------------------------------------------------------------------
  "  Status Line
  "
  "---------------------------------------------------------------------------

" path
set statusline=%f
" flags
set statusline+=%m%r%h%w
" git branch
"set statusline+=\ %{fugitive#statusline()}
" encoding
set statusline+=\ [%{strlen(&fenc)?&fenc:&enc}]
" rvm
"set statusline+=\ %{rvm#statusline()}
" line x of y
set statusline+=\ [Line\ %l\/%L\ %P]
" col
set statusline+=\ [Col\ %c\/%v]
" Buff
set statusline+=\ [Buf\ #\%n]

" Colour
hi StatusLine ctermfg=Black ctermbg=White

" Change colour of statusline in insert mode
au InsertEnter * hi StatusLine ctermbg=DarkBlue
au InsertLeave * hi StatusLine ctermfg=Black ctermbg=White

" ---------------------------------------------------------------------------
"  Mappings
" ---------------------------------------------------------------------------

" Searching / moving
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

" Center screen when scrolling search results
nmap n nzz
nmap N Nzz


" fzf config
set rtp+=/usr/local/opt/fzf

" ACK
set grepprg=ack

" ,a to Ack (search in files)
nnoremap <leader>a :Ack 

" Ack settings:
"https://github.com/krisleech/vimfiles/wiki/Make-ack-ignore-files

" show/ hide cursor line
hi CursorLine   cterm=NONE ctermbg=235
hi CursorColumn cterm=NONE ctermbg=235
nnoremap <leader>x :set cursorline! cursorcolumn!

" Edit/View files relative to current directory
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%
nmap <silent> <leader>E :Explore<CR>

" Ignore some binary, versioning and backup files when auto-completing
set wildignore=.svn,CVS,.git,*.swp,*.jpg,*.png,*.gif,*.pdf,*.bak"

"  ---------------------------------------------------------------------------
"  Plugins
"  ---------------------------------------------------------------------------
"#UltiSnip
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"let g:UltiSnipsSnippetDirectories="~/.vim/bundle/vim-snippets/snippets"
let g:UltiSnipsSnippetDirectories = ['~/.vim/plugged/vim-snippets/snippets', 'UltiSnips']

"#FuzzyFinder
"let g:fzf_command_prefix = 'Fzf'
map <leader>F :Files<CR>
map <leader>s :Tags<CR>
map <leader>S :BTags<CR>
map <leader>b :Buffers<CR>

" AutoClose
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}'} 
let g:AutoCloseProtectedRegions = ["Character"] 

let my_home = expand("$HOME/")

let g:jsx_ext_required = 0 " Allow JSX in normal JS files
"let g:textobj_ruby_more_mappings = 1

"  ---------------------------------------------------------------------------
"  Ruby/Rails
"  ---------------------------------------------------------------------------
" Leader shortcuts for Rails commands
map <Leader>m :Emodel 
map <Leader>c :Econtroller 
map <Leader>v :Eview 
map <Leader>u :Eunittest 
map <Leader>ff :Rfunctionaltest 
map <Leader>tm :RTmodel 
map <Leader>tc :RTcontroller 
map <Leader>tv :RTview 
map <Leader>tu :RTunittest 
map <Leader>tf :RTfunctionaltest 
map <Leader>sm :RSmodel 
map <Leader>sc :RScontroller 
map <Leader>sv :RSview 
map <Leader>su :RSunittest 
map <Leader>sf :RSfunctionaltest 

"  ---------------------------------------------------------------------------
"  Rspc
"  ---------------------------------------------------------------------------
let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'

" Hide search highlighting
map <Leader>h :set invhls <CR>

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled
" in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
" Execute current buffer as ruby
map <S-r> :w !ruby<CR>

" Other files to consider Ruby
au BufRead,BufNewFile Gemfile,Rakefile,Thorfile,config.ru,Vagrantfile,Guardfile,Capfile set ft=ruby


" ---------------------------------------------------------------------------
" Fugitive
" ---------------------------------------------------------------------------

nmap <leader>gs :G<CR>
nmap <leader>gh :diffget //2<CR>
nmap <leader>gl :diffget //3<CR>

" ---------------------------------------------------------------------------
"  Directories
"
" ---------------------------------------------------------------------------

set backupdir=~/tmp,/tmp
"set undodir=~/.vim/.tmp,~/tmp,~/.tmp,/tmp

" Ctags path (brew install ctags)
let Tlist_Ctags_Cmd = 'ctags'

" Make Vim use RVM correctly when using Zsh
" https://rvm.beginrescueend.com/integration/vim/
set shell=/bin/zsh

" Finally, load custom configs
if filereadable(my_home . '.vimrc.local')
  source ~/.vimrc.local
endif

" ---------------------------------------------------------------------------
" Syntastic 
" ---------------------------------------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
let g:syntastic_ruby_mri_args = "-W1"


let g:dart_format_on_save = 1
let g:dartfmt_options = ['--fix', '--line-length 120']

" ---------------------------------------------------------------------------
" Coc
" ---------------------------------------------------------------------------
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" typescript server
let g:coc_global_extensions = [ 'coc-tsserver' ] 

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

imap <tab> <Plug>(coc-snippets-expand)
let g:UltiSnipsExpandTrigger = '<Nop>'
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

"coc config
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-tsserver',
  \ 'coc-eslint', 
  \ 'coc-prettier', 
  \ 'coc-json', 
  \ 'coc-flutter',
  \ 'coc-snippets',
  \ 'coc-yaml',
  \ 'coc-tslint-plugin',
  \ 'coc-tsserver',
  \ 'coc-emmet',
  \ 'coc-css',
  \ 'coc-html',
  \ 'coc-json',
  \ ]


" ---------------------------------------------------------------------------
" Misc 
" ---------------------------------------------------------------------------
"  allow .vimrc per project
set exrc
set secure

"When vimrc, either directly or via symlink, is edited, automatically reload it
" autocmd! bufwritepost .vimrc source %
" autocmd! bufwritepost vimrc source %
